/* 테이블 생성 
 * 1. 직원정보
 * 2. 부서정보
 * 2-1. 부서이동정보
 * 3. 연봉정보
 * 3-1. 연봉이력정보
 * 4. 지급내역정보
 * 5. 근태정보
 */
 
/* 1. 직원정보 */
CREATE TABLE EMPLOYEE(
    EM_CODE     NUMBER(5)       NOT NULL, -- 사원코드
    EM_NAME     VARCHAR2(20)            ,
    DE_CODE     NUMBER(5)               ,
    SA_RANK     VARCHAR2(2)             ,
    EM_DATE     VARCHAR2(8)             ,
    EM_TEL      VARCHAR2(13)            ,
    EM_ADDR     VARCHAR2(50)            ,
    EM_JOIN     VARCHAR2(8)             ,
    EM_QUIT     VARCHAR2(8)             ,
    CONSTRAINT EMPLOYEE_PK PRIMARY KEY (EM_CODE)
);


/* 2. 부서정보 */
CREATE TABLE DEOARTMENT(
    DE_CODE     NUMBER(5)      NOT NULL, -- 부서코드
    DE_NAME     VARCHAR2(20)           ,  -- 부서이름
    CONSTRAINT DEOARTMENT_PK PRIMARY KEY (DE_CODE)
);


/* 2-1. 부서이동정보 */ 
CREATE TABLE MOVEDEOARTMENT(
    EM_CODE     NUMBER(5)       NOT NULL,
    BF_MD_CODE  NUMBER(5)       NOT NULL,
    AF_MD_CODE  NUMBER(5)               ,
    MD_DATE     VARCHAR2(8)                    
);

ALTER TABLE MOVEDEOARTMENT ADD CONSTRAINT MOVEDEOARTMENT_PK PRIMARY KEY (EM_CODE, BF_MD_CODE, AF_MD_CODE);


/* 3. 연봉테이블 */
CREATE TABLE SALARY(
    SA_CODE     NUMBER(5)       NOT NULL, 
    SA_YEAR     VARCHAR2(4)     NOT NULL,
    DE_CODE     NUMBER(5)       NOT NULL,
    SA_RANK     VARCHAR2(2)     NOT NULL,
    SA_AMT      NUMBER(10)      NOT NULL
);

ALTER TABLE SALARY ADD CONSTRAINT SALARY_PK PRIMARY KEY (SA_CODE, SA_YEAR, DE_CODE, SA_RANK);


/* 3-1. 연봉이력정보 */ 
CREATE TABLE SALARYHISTORY(
    EM_CODE     NUMBER(5)       NOT NULL,
    SA_CODE     NUMBER(5)       NOT NULL,
    SH_DATE     VARCHAR2(8)                    
);

ALTER TABLE SALARYHISTORY ADD CONSTRAINT SALARYHISTORY_PK PRIMARY KEY (EM_CODE, SA_CODE);

/* 4. 지급내역정보(급여 퇴직금) */ 
CREATE TABLE PAYROLL(
    EM_CODE     NUMBER(5)       NOT NULL,
    PA_CODE     VARCHAR2(2)     NOT NULL,
    PA_ATDATE   VARCHAR2(8)             ,
    PA_PAYDATE  VARCHAR2(10)        DEFAULT SYSDATE,
    PA_NORMAL   NUMBER(10)      NOT NULL,
    PA_MEAL     NUMBER(10)              ,
    PA_DRIVE    NUMBER(10)              ,
    PA_BONUS    NUMBER(10)              ,
    PA_OVER     NUMBER(10)              ,
    PA_ETC      NUMBER(10)              ,
    PA_HEALTH   NUMBER(10)              ,
    PA_LONGCARE NUMBER(10)              ,
    PA_NOTIONAL NUMBER(10)              ,
    PA_EMP      NUMBER(10)              ,
    PA_PAYETC   NUMBER(10)              ,
    PA_TAX      NUMBER(10)              ,
    PA_LOCALTAX NUMBER(10)              
);

ALTER TABLE PAYROLL ADD CONSTRAINT PAYROLL_PK PRIMARY KEY (EM_CODE, PA_CODE, PA_ATDATE, PA_PAYDATE, PA_NORMAL );


/* 5. 근태정보 */ 
CREATE TABLE ATTENDANCE(
    EM_CODE     NUMBER(5)       NOT NULL,
    AT_CODE     NUMBER(5)       NOT NULL,
    AT_DATE     VARCHAR2(8)             ,
    CONSTRAINT ATTENDANCE_PK PRIMARY KEY (EM_CODE, AT_CODE)
);


COMMIT;

SELECT * FROM USER_ALL_TABLES;



SELECT * FROM EMPLOYEE;
SELECT * FROM DEOARTMENT;
SELECT * FROM MOVEDEOARTMENT;
SELECT * FROM SALARY;
SELECT * FROM SALARYHISTORY;
SELECT * FROM PAYROLL;
SELECT * FROM ATTENDANCE;



---- PL/SQL LOOP, FOR문 ----
DECLARE
 EM_NAME VARCHAR2(100) := 'test6_';
 SA_RANK VARCHAR2(2) := 'D';
 EM_DATE VARCHAR2(8) := '19990101';
BEGIN
	 FOR i IN 231..250
	 LOOP
	 INSERT INTO EMPLOYEE
	 VALUES
	 (i, 
      EM_NAME || i,
      i,
      SA_RANK,
      EM_DATE,
      NULL,
      NULL,
      '20171001',
      NULL
      );
	END LOOP;
    COMMIT;
END;

/

/
DECLARE
 EM_NAME VARCHAR2(100) := 'test1_';
 EM_DATE VARCHAR2(8) := '19990101';
BEGIN
	 FOR i IN 51..250
	 LOOP
	 INSERT INTO PAYROLL
	 VALUES
	 (i, 
      'S',
      '2023-08',
      '9999-99-99',
      (SELECT ROUND(SA_AMT / 12, 0) FROM SALARY WHERE SA_YEAR = '2023' AND SA_RANK = (SELECT SA_RANK FROM EMPLOYEE WHERE EM_CODE = i)),
      200000,
      200000,
      (SELECT ROUND(SA_AMT / 12, 0) * 0.5 FROM SALARY WHERE SA_YEAR = '2023' AND SA_RANK = (SELECT SA_RANK FROM EMPLOYEE WHERE EM_CODE = i)),
      NULL,
      NULL,
    NULL, NULL, NULL, NULL,
      NULL,
      NULL,
      NULL
      );
	END LOOP;
    COMMIT;
END;

/

INSERT INTO SALARY VALUES(1, '2017', 1, 'A', 12000000);
INSERT INTO SALARY VALUES(2, '2017', 2, 'B', 15000000);
INSERT INTO SALARY VALUES(3, '2017', 3, 'C', 20000000);
INSERT INTO SALARY VALUES(4, '2017', 4, 'D', 25000000);
INSERT INTO SALARY VALUES(5, '2017', 5, 'E', 40000000);

INSERT INTO SALARY VALUES(1, '2018', 1, 'A', 12000000);
INSERT INTO SALARY VALUES(2, '2018', 2, 'B', 15000000);
INSERT INTO SALARY VALUES(3, '2018', 3, 'C', 20000000);
INSERT INTO SALARY VALUES(4, '2018', 4, 'D', 25000000);
INSERT INTO SALARY VALUES(5, '2018', 5, 'E', 40000000);

INSERT INTO SALARY VALUES(1, '2019', 1, 'A', 20000000);
INSERT INTO SALARY VALUES(2, '2019', 2, 'B', 25000000);
INSERT INTO SALARY VALUES(3, '2019', 3, 'C', 30000000);
INSERT INTO SALARY VALUES(4, '2019', 4, 'D', 35000000);
INSERT INTO SALARY VALUES(5, '2019', 5, 'E', 60000000);

INSERT INTO SALARY VALUES(1, '2020', 1, 'A', 30000000);
INSERT INTO SALARY VALUES(2, '2020', 2, 'B', 35000000);
INSERT INTO SALARY VALUES(3, '2020', 3, 'C', 40000000);
INSERT INTO SALARY VALUES(4, '2020', 4, 'D', 45000000);
INSERT INTO SALARY VALUES(5, '2020', 5, 'E', 80000000);

INSERT INTO SALARY VALUES(1, '2021', 1, 'A', 31000000);
INSERT INTO SALARY VALUES(2, '2021', 2, 'B', 36000000);
INSERT INTO SALARY VALUES(3, '2021', 3, 'C', 41000000);
INSERT INTO SALARY VALUES(4, '2021', 4, 'D', 46000000);
INSERT INTO SALARY VALUES(5, '2021', 5, 'E', 85000000);


INSERT INTO SALARY VALUES(1, '2022', 1, 'A', 33000000);
INSERT INTO SALARY VALUES(2, '2022', 2, 'B', 38000000);
INSERT INTO SALARY VALUES(3, '2022', 3, 'C', 43000000);
INSERT INTO SALARY VALUES(4, '2022', 4, 'D', 48000000);
INSERT INTO SALARY VALUES(5, '2022', 5, 'E', 89000000);

INSERT INTO SALARY VALUES(1, '2023', 1, 'A', 35000000);
INSERT INTO SALARY VALUES(2, '2023', 2, 'B', 40000000);
INSERT INTO SALARY VALUES(3, '2023', 3, 'C', 45000000);
INSERT INTO SALARY VALUES(4, '2023', 4, 'D', 50000000);
INSERT INTO SALARY VALUES(5, '2023', 5, 'E', 105000000);


/

SELECT * FROM PAYROLL;

/

MERGE
INTO PAYROLL B
USING (
    SELECT EM_CODE, 
            PA_ATDATE, 
            ROUND((A.PA_NORMAL + A.PA_BONUS) * 0.0306, -1) AS HEALTH,
            ROUND((A.PA_NORMAL + A.PA_BONUS) * 0.0306 * 0.0655, -1) AS LONGS,
            ROUND((A.PA_NORMAL + A.PA_BONUS) * 0.045, -1) AS NOTION,
            ROUND((A.PA_NORMAL + A.PA_BONUS) * 0.0065, -1) AS EMP
    FROM PAYROLL A
) A 
ON (
    A.EM_CODE = B.EM_CODE 
    AND A.PA_ATDATE = B.PA_ATDATE
    )
WHEN MATCHED THEN
UPDATE 
SET 
B.PA_HEALTH = A.HEALTH,
   B.PA_LONGCARE = A.LONGS,
   B.PA_NOTIONAL = A.NOTION,
  B.PA_EMP = A.EMP
    ;
    
   
/   
    SELECT EM_CODE, 
            PA_ATDATE, 
            ROUND((PA_NORMAL + PA_BONUS) * 0.0306, -1) AS HEALTH,
            ROUND((PA_NORMAL + PA_BONUS) * 0.0306 * 0.0655, -1) AS LONGS,
            ROUND((PA_NORMAL + PA_BONUS) * 0.045, -1) AS NOTION,
            ROUND((PA_NORMAL + PA_BONUS) * 0.0065, -1) AS EMP
    FROM PAYROLL; 

/

DELETE FROM PAYROLL
WHERE PA_NORMAL = 0;

/

SELECT * FROM PAYROLL;

/

SELECT  
        B.DE_CODE, 

        SUM(급여), 
        SUM(차감액),  
        SUM(실지급액)
FROM (
        SELECT EM_CODE,
                (PA_NORMAL+ PA_MEAL + PA_DRIVE + PA_BONUS) AS 급여, 
                (PA_HEALTH + PA_LONGCARE + PA_NOTIONAL + PA_EMP) AS 차감액,  
                (PA_NORMAL+ PA_MEAL + PA_DRIVE + PA_BONUS)-(PA_HEALTH + PA_LONGCARE + PA_NOTIONAL + PA_EMP) AS 실지급액
        FROM PAYROLL
) A, EMPLOYEE B
WHERE A.EM_CODE = B.EM_CODE
GROUP BY DE_CODE;

/

SELECT COUNT(1) FROM PAYROLL;

SELECT DE_CODE, COUNT(1) FROM EMPLOYEE GROUP BY DE_CODE;

UPDATE EMPLOYEE
SET DE_CODE =  5
WHERE DE_CODE = 0;

/

